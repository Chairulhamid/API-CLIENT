#pragma checksum "D:\MII\Programming1\API\Client\Views\Home\Basic.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "27ba0c192ff6aed3eb91849b8a3c465d512341b9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Basic), @"mvc.1.0.view", @"/Views/Home/Basic.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\MII\Programming1\API\Client\Views\_ViewImports.cshtml"
using Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\MII\Programming1\API\Client\Views\_ViewImports.cshtml"
using Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"27ba0c192ff6aed3eb91849b8a3c465d512341b9", @"/Views/Home/Basic.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3332004e6f18ccbec22253d7e177fe1fd5f40969", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Basic : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\MII\Programming1\API\Client\Views\Home\Basic.cshtml"
  
    ViewData["Title"] = "Home Page";
    Layout = "_LayoutAdmin";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<section>\r\n        <div class=\"container mt-3 mb-3\">\r\n            <div class=\"mb-3\">\r\n                <h1");
            BeginWriteAttribute("class", " class=\"", 182, "\"", 190, 0);
            EndWriteAttribute();
            WriteLiteral(@">GRID SYSTEM </h1>
            </div>
            <div class=""row"">
                <div class=""col "">
                    <div class=""mb-4 "">For example, here are two grid layouts that apply to every device and viewport, from xs to xl. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.</div>
                    <div");
            BeginWriteAttribute("class", " class=\"", 569, "\"", 577, 0);
            EndWriteAttribute();
            WriteLiteral(@">While Bootstrap uses ems or rems for defining most sizes, pxs are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the font size.</div>
                </div>
                <div class=""col"">
                    <div");
            BeginWriteAttribute("class", " class=\"", 871, "\"", 879, 0);
            EndWriteAttribute();
            WriteLiteral(@">Columns have horizontal padding to create the gutters b the margin from rows and padding from columns with .no-gutters on the .row.Columns have horizontal padding to create the gutters between individual columns, however, you can remove the margin from rows and padding from columns with .no-gutters on the .row.Columns have horizontal padding to create the gutters between individual columns, however, you can remove the margin from rows and padding from columns with .no-gutters on the .row.</div>
                </div>
            </div>
        </div>
        <div class=""container mt-3 mb-3"">
            <div class=""mb-3"">
                <h1");
            BeginWriteAttribute("class", " class=\"", 1536, "\"", 1544, 0);
            EndWriteAttribute();
            WriteLiteral(@">GRID SYSTEM </h1>
            </div>
            <div class=""row"">
                <div class=""col "">
                    <div class=""mb-4 "">For example, here are two grid layouts that apply to every device and viewport, from xs to xl. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.</div>
                    <div");
            BeginWriteAttribute("class", " class=\"", 1923, "\"", 1931, 0);
            EndWriteAttribute();
            WriteLiteral(@">While Bootstrap uses ems or rems for defining most sizes, pxs are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the font size.</div>
                </div>
                <div class=""col"">
                    <img src=""https://images.pexels.com/photos/689784/pexels-photo-689784.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500"" width=""450"" />
                </div>
            </div>
        </div>
        <section class=""container tButton text-white mt-4"">
            <div class=""container text-center p-1"">
                <h2>Click Button!!!</h2>
                <button id=""ubahWarna"" type=""button"" class="" btn btn-xl btn-outline-light  "">Success</button>
                <button id=""ubahWarna"" type=""button"" class="" btn btn-xl btn-outline-light  "">Danger</button>
                <button type=""button"" class=""btn btn-xl btn-outline-light "">Warning</button>
            </div>
        </section>
          <div class=""container  m");
            WriteLiteral("t-3 mb-3 tButton\">\r\n            </div>\r\n        <div class=\"container mt-3 mb-3\">\r\n            <div class=\"mb-3\">\r\n                <h1");
            BeginWriteAttribute("class", " class=\"", 3090, "\"", 3098, 0);
            EndWriteAttribute();
            WriteLiteral(@">GRID SYSTEM </h1>
            </div>
            <div class=""row"">
                <div class=""col "">
                    <div class=""mb-4 bg-danger text-warning "">For example, here are two grid layouts that apply to every device and viewport, from xs to xl. Add any number of unit-less classes for each breakpoint you need and every column will be the same width.</div>
                    <div class="" bg-secondary text-white"">While Bootstrap uses ems or rems for defining most sizes, pxs are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the font size.</div>
                </div>
                <div class=""col"">
                    <div class=""bg-dark text-light"">Columns have horizontal padding to create the gutters b the margin from rows and padding from columns with .no-gutters on the .row.Columns have horizontal padding to create the gutters between individual columns, however, you can remove the margin from rows and padding");
            WriteLiteral(@" from columns with .no-gutters on the .row.Columns have horizontal padding to create the gutters between individual columns, however, you can remove the margin from rows and padding from columns with .no-gutters on the .row.</div>
                </div>
            </div>
        </div>
    </section>


");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
